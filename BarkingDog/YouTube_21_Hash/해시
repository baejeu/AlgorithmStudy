- 해시

해시 자료구조는 키에 대응하는 값을 저장하는 자료구조

해시 자료구조애서는 모든 연산이 전부 O(1)

- 해시 함수

임의 길이의 데이터를 고정된 길이의 데이터로 대응하는 함수

EX) 카드번호 (4852 9382 3341 1351 KIM) 이라는 카드번호가 있으면
뒷자리 4개만으로 저장 이걸 해주는 함수가 해시 함수

해시 테이블
0000 .... 1351 .... 9999
          KIM

- 해시 충돌

EX) 카드 번호( 0000 0000 0000 3151 KIM) 삽입
이때 9999 9999 9999 3151 의 이름은? 질문이 들어오면 KIM이라고 답변
이게 해시 충돌이다. 즉 키가 같은 해시 값을 가지면 이렇게 해시 충돌이 발생한다.

해시 충돌을 막기 위해서 카드 전체를 인덱스로 두기에는 너무 배열이 커진다.
애초에 해시 함수가 정의역값이 너무 커서 그 범위를 줄이는게 목적이다.

충돌이 발생했을 때?
회피 방안에 대해 많은 연구를 했다.
크게 Chaining , Open Addressing 2가지 방법이 있다.

- Chaining

Chaining 에서는 각 인데스마다 연결 리스트를 하나씩 둔다.

EX)
0000 0000 0000 5135 KIM 추가

0000 ... 5135 ... 9999
         KIM(0000 0000 0000 5135)

9999 9999 9999 5135 Choi 추가

0000 ... 5135 ... 9999
         KIM(0000 0000 0000 5135)
         Choi(9999 9999 9999 5135)

각 인덱스마다 연결 리스트를 둬서 충돌 회피를 하는 방법을 Chaining 이라고 한다.

이상적인 상황에서는 O(1)이지만 모든 해시 값이 같은 최악의 상황에서는 O(N)이 되어버린다.
그래서 각 해시 값이 최대한 균등하게 퍼져야 성능이 좋아지고 그러기 위해서는 주어진 데이터에 대한 좋은 해시 함수를 정해야 한다.

-  Open Addressing

Chaining 과 다르게 Open Addressing은 그냥 각 인덱스에 바로 (키, 값) 쌍을 쓴다.

EX) 0000 0000 0000 5135 KIM 추가

0000 ... 5135 ... 9999
         KIM(0000 0000 0000 5135)

0000 0000 9999 5135 BAE 추가

0000 ... 5135 5136 ... 9999
              BAE(0000 0000 9999 5135 BAE)

즉 바로 다음 index에 추가한다.

만약 존재하지 않는 카드번호를 찾는다면
ex) 5135를 찾는다면 5135에서 시작해서 5136 , 5137 .... 을 찾다기 비어있는 공간을 발견하면 존재x를 확인한다.




